diff --git a/drivers/tty/serial/imx.c b/drivers/tty/serial/imx.c
index d557f1e..b2db301 100644
--- a/drivers/tty/serial/imx.c
+++ b/drivers/tty/serial/imx.c
@@ -49,6 +49,8 @@
 #include <linux/of_device.h>
 #include <linux/io.h>
 #include <linux/dma-mapping.h>
+#include <linux/gpio.h>
+#include <linux/of_gpio.h>
 
 #include <asm/irq.h>
 #include <linux/platform_data/serial-imx.h>
@@ -189,6 +191,9 @@
 #define UART_NR 8
 #define IMX_RXBD_NUM 20
 
+#define RS485_DE_GPIO 0
+#define RS485_RE_GPIO 1
+
 /* i.mx21 type uart runs on all i.mx except i.mx1 */
 enum imx_uart_type {
 	IMX1_UART,
@@ -250,6 +255,7 @@ struct imx_port {
 	unsigned int            saved_reg[11];
 #define DMA_TX_IS_WORKING 1
 	unsigned long		flags;
+	struct serial_rs485 rs485;
 };
 
 struct imx_port_ucrs {
@@ -303,6 +309,54 @@ static struct of_device_id imx_uart_dt_ids[] = {
 };
 MODULE_DEVICE_TABLE(of, imx_uart_dt_ids);
 
+static inline struct imx_port *to_imx_uart_port(struct uart_port *uart)
+{
+    return container_of(uart, struct imx_port, port);
+}
+
+static void imx_rs485_switch_to_tx(struct imx_port *sport)
+{
+	gpio_set_value(sport->rs485.padding[RS485_DE_GPIO], 1);
+	gpio_set_value(sport->rs485.padding[RS485_RE_GPIO], 0);
+
+	writel(readl(sport->port.membase + UCR4) | UCR4_TCEN,
+                   sport->port.membase + UCR4);
+}
+
+static void imx_rs485_switch_to_rx(struct imx_port *sport)
+{
+	gpio_set_value(sport->rs485.padding[RS485_DE_GPIO], 0);
+	gpio_set_value(sport->rs485.padding[RS485_RE_GPIO], 0);
+
+	writel(readl(sport->port.membase + UCR4) & ~UCR4_TCEN,
+                   sport->port.membase + UCR4);
+}
+
+void imx_rs485_config(struct imx_port *sport)
+{
+    struct ktermios ktermios;
+	struct tty_struct *tty;
+
+	if (sport->rs485.flags & SER_RS485_ENABLED) {
+        // force ECHO off when in RS485 mode
+        tty = sport->port.state->port.tty;
+        ktermios = tty->termios;
+        if (ktermios.c_lflag & ECHO) {
+            ktermios.c_lflag &= ~(ECHO);
+            tty_set_termios(tty, &ktermios);
+        }
+
+        writel(readl(sport->port.membase + UCR2) & ~UCR2_CTSC,
+                sport->port.membase + UCR2);
+        writel(readl(sport->port.membase + UCR4) | UCR4_IRSC,
+                sport->port.membase + UCR4);
+
+		imx_rs485_switch_to_rx(sport);
+	} else {
+		sport->rs485.flags &= ~SER_RS485_ENABLED;
+	}
+}
+
 static inline unsigned uts_reg(struct imx_port *sport)
 {
 	return sport->devdata->uts_reg;
@@ -398,6 +452,12 @@ static void imx_stop_tx(struct uart_port *port)
 	struct imx_port *sport = (struct imx_port *)port;
 	unsigned long temp;
 
+	if (sport->rs485.flags & SER_RS485_ENABLED) {
+        if (readl(sport->port.membase + USR2) & USR2_TXDC) {
+            imx_rs485_switch_to_rx(sport);
+        }
+    }
+
 	if (USE_IRDA(sport)) {
 		/* half duplex - wait for end of transmission */
 		int n = 256;
@@ -606,6 +666,13 @@ static void imx_start_tx(struct uart_port *port)
 	struct imx_port *sport = (struct imx_port *)port;
 	unsigned long temp;
 
+    if (sport->rs485.flags & SER_RS485_ENABLED) {
+        imx_rs485_switch_to_tx(sport);
+	}
+
+	if (uart_circ_empty(&port->state->xmit))
+		return;
+
 	if (USE_IRDA(sport)) {
 		/* half duplex in IrDA mode; have to disable receive mode */
 		temp = readl(sport->port.membase + UCR4);
@@ -616,6 +683,7 @@ static void imx_start_tx(struct uart_port *port)
 		temp &= ~(UCR1_RRDYEN);
 		writel(temp, sport->port.membase + UCR1);
 	}
+
 	/* Clear any pending ORE flag before enabling interrupt */
 	temp = readl(sport->port.membase + USR2);
 	writel(temp | USR2_ORE, sport->port.membase + USR2);
@@ -765,6 +833,13 @@ static irqreturn_t imx_int(int irq, void *dev_id)
 	unsigned int sts;
 	unsigned int sts2;
 
+	if (sport->rs485.flags & SER_RS485_ENABLED) {
+        if ((readl(sport->port.membase + USR2) & USR2_TXDC) &&
+            (readl(sport->port.membase + UCR4) & UCR4_TCEN)) {
+                    imx_txint(irq, dev_id);
+        }
+    }
+
 	sts = readl(sport->port.membase + USR1);
 
 	if ((sts & USR1_RRDY || sts & USR1_AGTIM) &&
@@ -839,11 +914,13 @@ static void imx_set_mctrl(struct uart_port *port, unsigned int mctrl)
 	struct imx_port *sport = (struct imx_port *)port;
 	unsigned long temp;
 
-	temp = readl(sport->port.membase + UCR2) & ~(UCR2_CTS | UCR2_CTSC);
-	if (mctrl & TIOCM_RTS)
-		temp |= UCR2_CTS | UCR2_CTSC;
+    if (!(sport->rs485.flags & SER_RS485_ENABLED)) {
+        temp = readl(sport->port.membase + UCR2) & ~(UCR2_CTS | UCR2_CTSC);
+        if (mctrl & TIOCM_RTS)
+            temp |= UCR2_CTS | UCR2_CTSC;
 
-	writel(temp, sport->port.membase + UCR2);
+        writel(temp, sport->port.membase + UCR2);
+    }
 
 	temp = readl(sport->port.membase + uts_reg(sport)) & ~UTS_LOOP;
 	if (mctrl & TIOCM_LOOP)
@@ -1589,6 +1666,10 @@ imx_set_termios(struct uart_port *port, struct ktermios *termios,
 		writel(ucr2 | UCR2_ATEN, sport->port.membase + UCR2);
 	}
 
+    if (sport->rs485.flags & SER_RS485_ENABLED) {
+        imx_rs485_config(sport);
+    }
+
 	spin_unlock_irqrestore(&sport->port.lock, flags);
 }
 
@@ -1702,6 +1783,32 @@ static void imx_poll_put_char(struct uart_port *port, unsigned char c)
 }
 #endif
 
+static int imx_ioctl(struct uart_port *port, unsigned int cmd, unsigned long arg)
+{
+    struct imx_port *sport = (struct imx_port *)port;
+
+	switch (cmd) {
+	case TIOCSRS485:
+		if (copy_from_user(&(sport->rs485), (struct serial_rs485 *)arg,
+                     sizeof(struct serial_rs485)))
+            return -EFAULT;
+        if (sport->rs485.flags & SER_RS485_ENABLED)
+            imx_rs485_config(sport);
+		break;
+
+	case TIOCGRS485:
+		if (copy_to_user((struct serial_rs485 *) arg, &(sport->rs485),
+                   sizeof(struct serial_rs485)))
+            return -EFAULT;
+		printk(KERN_NOTICE"Getting RS485 parameters for the device\n");
+		break;
+
+	default:
+		return -ENOIOCTLCMD;
+	}
+	return 0;
+}
+
 static struct uart_ops imx_pops = {
 	.tx_empty	= imx_tx_empty,
 	.set_mctrl	= imx_set_mctrl,
@@ -1722,6 +1829,7 @@ static struct uart_ops imx_pops = {
 	.poll_get_char  = imx_poll_get_char,
 	.poll_put_char  = imx_poll_put_char,
 #endif
+    .ioctl		= imx_ioctl,
 };
 
 static struct imx_port *imx_ports[UART_NR];
@@ -2006,6 +2114,7 @@ static int serial_imx_probe_dt(struct imx_port *sport,
 	const struct of_device_id *of_id =
 			of_match_device(imx_uart_dt_ids, &pdev->dev);
 	int ret;
+	int gpio;
 
 	if (!np)
 		/* no device tree device */
@@ -2027,6 +2136,31 @@ static int serial_imx_probe_dt(struct imx_port *sport,
 	if (of_get_property(np, "fsl,dte-mode", NULL))
 		sport->dte_mode = 1;
 
+    if (of_get_property(np, "fsl,rs485-mode", NULL))
+    {
+        sport->rs485.flags |= SER_RS485_ENABLED;
+
+        gpio = of_get_named_gpio(np, "rs485-de-gpio", 0);
+        if (gpio < 0) {
+            dev_err(&pdev->dev, "could not find RS485 driver output enable gpio\n");
+            sport->rs485.padding[RS485_DE_GPIO] = -1;
+            ret = gpio;
+        }
+        else {
+            sport->rs485.padding[RS485_DE_GPIO] = gpio;
+        }
+
+        gpio = of_get_named_gpio(np, "rs485-re-gpio", 0);
+        if (gpio < 0) {
+            dev_err(&pdev->dev, "could not find RS485 receiver output enable gpio\n");
+            sport->rs485.padding[RS485_RE_GPIO] = -1;
+            ret = gpio;
+        }
+        else {
+            sport->rs485.padding[RS485_RE_GPIO] = gpio;
+        }
+    }
+
 	sport->devdata = of_id->data;
 
 	return 0;
@@ -2063,6 +2197,7 @@ static int serial_imx_probe(struct platform_device *pdev)
 	void __iomem *base;
 	int ret = 0;
 	struct resource *res;
+	int de_gpio, re_gpio;
 
 	sport = devm_kzalloc(&pdev->dev, sizeof(*sport), GFP_KERNEL);
 	if (!sport)
@@ -2115,6 +2250,42 @@ static int serial_imx_probe(struct platform_device *pdev)
 
 	platform_set_drvdata(pdev, sport);
 
+	if (sport->rs485.flags & SER_RS485_ENABLED)
+    {
+        printk(KERN_NOTICE "Setting UART /dev/ttymxc%d to RS485\n", sport->port.line);
+
+        de_gpio = sport->rs485.padding[RS485_DE_GPIO];
+        re_gpio = sport->rs485.padding[RS485_RE_GPIO];
+
+        if (gpio_is_valid(de_gpio)) {
+            ret = devm_gpio_request(&pdev->dev, de_gpio, DRIVER_NAME);
+            if (ret) {
+                dev_err(&pdev->dev, "could not request %d gpio\n", de_gpio);
+                return ret;
+            }
+
+            ret = gpio_direction_output(de_gpio, 0);
+            if (ret) {
+                dev_err(&pdev->dev, "could not set gpio %d as output\n", de_gpio);
+                return ret;
+            }
+        }
+
+        if (gpio_is_valid(re_gpio)) {
+           ret = devm_gpio_request(&pdev->dev, re_gpio, DRIVER_NAME);
+            if (ret) {
+                dev_err(&pdev->dev, "could not request %d gpio\n", re_gpio);
+                return ret;
+            }
+
+            ret = gpio_direction_output(re_gpio, 0);
+            if (ret) {
+                dev_err(&pdev->dev, "could not set gpio %d as output\n", re_gpio);
+                return ret;
+            }
+        }
+    }
+
 	return uart_add_one_port(&imx_reg, &sport->port);
 }
 
